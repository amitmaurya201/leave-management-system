/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.leave.model.impl;

import com.adjecti.leave.model.LeaveApplication;
import com.adjecti.leave.model.LeaveApplicationModel;
import com.adjecti.leave.model.LeaveApplicationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LeaveApplication service. Represents a row in the &quot;Leave_LeaveApplication&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LeaveApplicationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveApplicationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LeaveApplicationImpl
 * @generated
 */
@JSON(strict = true)
public class LeaveApplicationModelImpl
	extends BaseModelImpl<LeaveApplication> implements LeaveApplicationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave application model instance should use the <code>LeaveApplication</code> interface instead.
	 */
	public static final String TABLE_NAME = "Leave_LeaveApplication";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"leaveApplicationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"leaveReasonId", Types.BIGINT}, {"employeeId", Types.BIGINT},
		{"leaveTypeId", Types.BIGINT}, {"startDate", Types.VARCHAR},
		{"endDate", Types.VARCHAR}, {"startInHalfDay", Types.BOOLEAN},
		{"endInHalfDay", Types.BOOLEAN}, {"actualJoiningDate", Types.VARCHAR},
		{"remark", Types.VARCHAR}, {"documentId", Types.BIGINT},
		{"status", Types.VARCHAR}, {"reportingManager", Types.VARCHAR},
		{"joinInHalfDay", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaveApplicationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leaveReasonId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leaveTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startInHalfDay", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("endInHalfDay", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("actualJoiningDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportingManager", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("joinInHalfDay", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Leave_LeaveApplication (uuid_ VARCHAR(75) null,leaveApplicationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,leaveReasonId LONG,employeeId LONG,leaveTypeId LONG,startDate VARCHAR(75) null,endDate VARCHAR(75) null,startInHalfDay BOOLEAN,endInHalfDay BOOLEAN,actualJoiningDate VARCHAR(75) null,remark VARCHAR(75) null,documentId LONG,status VARCHAR(75) null,reportingManager VARCHAR(75) null,joinInHalfDay VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Leave_LeaveApplication";

	public static final String ORDER_BY_JPQL =
		" ORDER BY leaveApplication.status ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Leave_LeaveApplication.status ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static LeaveApplication toModel(LeaveApplicationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LeaveApplication model = new LeaveApplicationImpl();

		model.setUuid(soapModel.getUuid());
		model.setLeaveApplicationId(soapModel.getLeaveApplicationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLeaveReasonId(soapModel.getLeaveReasonId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setLeaveTypeId(soapModel.getLeaveTypeId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setStartInHalfDay(soapModel.isStartInHalfDay());
		model.setEndInHalfDay(soapModel.isEndInHalfDay());
		model.setActualJoiningDate(soapModel.getActualJoiningDate());
		model.setRemark(soapModel.getRemark());
		model.setDocumentId(soapModel.getDocumentId());
		model.setStatus(soapModel.getStatus());
		model.setReportingManager(soapModel.getReportingManager());
		model.setJoinInHalfDay(soapModel.getJoinInHalfDay());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<LeaveApplication> toModels(
		LeaveApplicationSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<LeaveApplication> models = new ArrayList<LeaveApplication>(
			soapModels.length);

		for (LeaveApplicationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LeaveApplicationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveApplicationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveApplicationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveApplicationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveApplication.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveApplication.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LeaveApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LeaveApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveApplication, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LeaveApplication)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LeaveApplication, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LeaveApplication, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LeaveApplication)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LeaveApplication, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LeaveApplication, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LeaveApplication>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LeaveApplication.class.getClassLoader(), LeaveApplication.class,
			ModelWrapper.class);

		try {
			Constructor<LeaveApplication> constructor =
				(Constructor<LeaveApplication>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<LeaveApplication, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LeaveApplication, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LeaveApplication, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<LeaveApplication, Object>>();
		Map<String, BiConsumer<LeaveApplication, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LeaveApplication, ?>>();

		attributeGetterFunctions.put("uuid", LeaveApplication::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<LeaveApplication, String>)LeaveApplication::setUuid);
		attributeGetterFunctions.put(
			"leaveApplicationId", LeaveApplication::getLeaveApplicationId);
		attributeSetterBiConsumers.put(
			"leaveApplicationId",
			(BiConsumer<LeaveApplication, Long>)
				LeaveApplication::setLeaveApplicationId);
		attributeGetterFunctions.put("groupId", LeaveApplication::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LeaveApplication, Long>)LeaveApplication::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LeaveApplication::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LeaveApplication, Long>)LeaveApplication::setCompanyId);
		attributeGetterFunctions.put("userId", LeaveApplication::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LeaveApplication, Long>)LeaveApplication::setUserId);
		attributeGetterFunctions.put("userName", LeaveApplication::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<LeaveApplication, String>)
				LeaveApplication::setUserName);
		attributeGetterFunctions.put(
			"createDate", LeaveApplication::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LeaveApplication, Date>)
				LeaveApplication::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", LeaveApplication::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LeaveApplication, Date>)
				LeaveApplication::setModifiedDate);
		attributeGetterFunctions.put(
			"leaveReasonId", LeaveApplication::getLeaveReasonId);
		attributeSetterBiConsumers.put(
			"leaveReasonId",
			(BiConsumer<LeaveApplication, Long>)
				LeaveApplication::setLeaveReasonId);
		attributeGetterFunctions.put(
			"employeeId", LeaveApplication::getEmployeeId);
		attributeSetterBiConsumers.put(
			"employeeId",
			(BiConsumer<LeaveApplication, Long>)
				LeaveApplication::setEmployeeId);
		attributeGetterFunctions.put(
			"leaveTypeId", LeaveApplication::getLeaveTypeId);
		attributeSetterBiConsumers.put(
			"leaveTypeId",
			(BiConsumer<LeaveApplication, Long>)
				LeaveApplication::setLeaveTypeId);
		attributeGetterFunctions.put(
			"startDate", LeaveApplication::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<LeaveApplication, String>)
				LeaveApplication::setStartDate);
		attributeGetterFunctions.put("endDate", LeaveApplication::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<LeaveApplication, String>)LeaveApplication::setEndDate);
		attributeGetterFunctions.put(
			"startInHalfDay", LeaveApplication::getStartInHalfDay);
		attributeSetterBiConsumers.put(
			"startInHalfDay",
			(BiConsumer<LeaveApplication, Boolean>)
				LeaveApplication::setStartInHalfDay);
		attributeGetterFunctions.put(
			"endInHalfDay", LeaveApplication::getEndInHalfDay);
		attributeSetterBiConsumers.put(
			"endInHalfDay",
			(BiConsumer<LeaveApplication, Boolean>)
				LeaveApplication::setEndInHalfDay);
		attributeGetterFunctions.put(
			"actualJoiningDate", LeaveApplication::getActualJoiningDate);
		attributeSetterBiConsumers.put(
			"actualJoiningDate",
			(BiConsumer<LeaveApplication, String>)
				LeaveApplication::setActualJoiningDate);
		attributeGetterFunctions.put("remark", LeaveApplication::getRemark);
		attributeSetterBiConsumers.put(
			"remark",
			(BiConsumer<LeaveApplication, String>)LeaveApplication::setRemark);
		attributeGetterFunctions.put(
			"documentId", LeaveApplication::getDocumentId);
		attributeSetterBiConsumers.put(
			"documentId",
			(BiConsumer<LeaveApplication, Long>)
				LeaveApplication::setDocumentId);
		attributeGetterFunctions.put("status", LeaveApplication::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<LeaveApplication, String>)LeaveApplication::setStatus);
		attributeGetterFunctions.put(
			"reportingManager", LeaveApplication::getReportingManager);
		attributeSetterBiConsumers.put(
			"reportingManager",
			(BiConsumer<LeaveApplication, String>)
				LeaveApplication::setReportingManager);
		attributeGetterFunctions.put(
			"joinInHalfDay", LeaveApplication::getJoinInHalfDay);
		attributeSetterBiConsumers.put(
			"joinInHalfDay",
			(BiConsumer<LeaveApplication, String>)
				LeaveApplication::setJoinInHalfDay);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLeaveApplicationId() {
		return _leaveApplicationId;
	}

	@Override
	public void setLeaveApplicationId(long leaveApplicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveApplicationId = leaveApplicationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getLeaveReasonId() {
		return _leaveReasonId;
	}

	@Override
	public void setLeaveReasonId(long leaveReasonId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveReasonId = leaveReasonId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeId = employeeId;
	}

	@JSON
	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_leaveTypeId = leaveTypeId;
	}

	@JSON
	@Override
	public String getStartDate() {
		if (_startDate == null) {
			return "";
		}
		else {
			return _startDate;
		}
	}

	@Override
	public void setStartDate(String startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public String getEndDate() {
		if (_endDate == null) {
			return "";
		}
		else {
			return _endDate;
		}
	}

	@Override
	public void setEndDate(String endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public boolean getStartInHalfDay() {
		return _startInHalfDay;
	}

	@JSON
	@Override
	public boolean isStartInHalfDay() {
		return _startInHalfDay;
	}

	@Override
	public void setStartInHalfDay(boolean startInHalfDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startInHalfDay = startInHalfDay;
	}

	@JSON
	@Override
	public boolean getEndInHalfDay() {
		return _endInHalfDay;
	}

	@JSON
	@Override
	public boolean isEndInHalfDay() {
		return _endInHalfDay;
	}

	@Override
	public void setEndInHalfDay(boolean endInHalfDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endInHalfDay = endInHalfDay;
	}

	@JSON
	@Override
	public String getActualJoiningDate() {
		if (_actualJoiningDate == null) {
			return "";
		}
		else {
			return _actualJoiningDate;
		}
	}

	@Override
	public void setActualJoiningDate(String actualJoiningDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_actualJoiningDate = actualJoiningDate;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return "";
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remark = remark;
	}

	@JSON
	@Override
	public long getDocumentId() {
		return _documentId;
	}

	@Override
	public void setDocumentId(long documentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentId = documentId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStatus() {
		return getColumnOriginalValue("status");
	}

	@JSON
	@Override
	public String getReportingManager() {
		if (_reportingManager == null) {
			return "";
		}
		else {
			return _reportingManager;
		}
	}

	@Override
	public void setReportingManager(String reportingManager) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportingManager = reportingManager;
	}

	@JSON
	@Override
	public String getJoinInHalfDay() {
		if (_joinInHalfDay == null) {
			return "";
		}
		else {
			return _joinInHalfDay;
		}
	}

	@Override
	public void setJoinInHalfDay(String joinInHalfDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_joinInHalfDay = joinInHalfDay;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LeaveApplication.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LeaveApplication.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveApplication toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LeaveApplication>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveApplicationImpl leaveApplicationImpl = new LeaveApplicationImpl();

		leaveApplicationImpl.setUuid(getUuid());
		leaveApplicationImpl.setLeaveApplicationId(getLeaveApplicationId());
		leaveApplicationImpl.setGroupId(getGroupId());
		leaveApplicationImpl.setCompanyId(getCompanyId());
		leaveApplicationImpl.setUserId(getUserId());
		leaveApplicationImpl.setUserName(getUserName());
		leaveApplicationImpl.setCreateDate(getCreateDate());
		leaveApplicationImpl.setModifiedDate(getModifiedDate());
		leaveApplicationImpl.setLeaveReasonId(getLeaveReasonId());
		leaveApplicationImpl.setEmployeeId(getEmployeeId());
		leaveApplicationImpl.setLeaveTypeId(getLeaveTypeId());
		leaveApplicationImpl.setStartDate(getStartDate());
		leaveApplicationImpl.setEndDate(getEndDate());
		leaveApplicationImpl.setStartInHalfDay(isStartInHalfDay());
		leaveApplicationImpl.setEndInHalfDay(isEndInHalfDay());
		leaveApplicationImpl.setActualJoiningDate(getActualJoiningDate());
		leaveApplicationImpl.setRemark(getRemark());
		leaveApplicationImpl.setDocumentId(getDocumentId());
		leaveApplicationImpl.setStatus(getStatus());
		leaveApplicationImpl.setReportingManager(getReportingManager());
		leaveApplicationImpl.setJoinInHalfDay(getJoinInHalfDay());

		leaveApplicationImpl.resetOriginalValues();

		return leaveApplicationImpl;
	}

	@Override
	public int compareTo(LeaveApplication leaveApplication) {
		int value = 0;

		value = getStatus().compareTo(leaveApplication.getStatus());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LeaveApplication)) {
			return false;
		}

		LeaveApplication leaveApplication = (LeaveApplication)object;

		long primaryKey = leaveApplication.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveApplication> toCacheModel() {
		LeaveApplicationCacheModel leaveApplicationCacheModel =
			new LeaveApplicationCacheModel();

		leaveApplicationCacheModel.uuid = getUuid();

		String uuid = leaveApplicationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			leaveApplicationCacheModel.uuid = null;
		}

		leaveApplicationCacheModel.leaveApplicationId = getLeaveApplicationId();

		leaveApplicationCacheModel.groupId = getGroupId();

		leaveApplicationCacheModel.companyId = getCompanyId();

		leaveApplicationCacheModel.userId = getUserId();

		leaveApplicationCacheModel.userName = getUserName();

		String userName = leaveApplicationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			leaveApplicationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveApplicationCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveApplicationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveApplicationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveApplicationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveApplicationCacheModel.leaveReasonId = getLeaveReasonId();

		leaveApplicationCacheModel.employeeId = getEmployeeId();

		leaveApplicationCacheModel.leaveTypeId = getLeaveTypeId();

		leaveApplicationCacheModel.startDate = getStartDate();

		String startDate = leaveApplicationCacheModel.startDate;

		if ((startDate != null) && (startDate.length() == 0)) {
			leaveApplicationCacheModel.startDate = null;
		}

		leaveApplicationCacheModel.endDate = getEndDate();

		String endDate = leaveApplicationCacheModel.endDate;

		if ((endDate != null) && (endDate.length() == 0)) {
			leaveApplicationCacheModel.endDate = null;
		}

		leaveApplicationCacheModel.startInHalfDay = isStartInHalfDay();

		leaveApplicationCacheModel.endInHalfDay = isEndInHalfDay();

		leaveApplicationCacheModel.actualJoiningDate = getActualJoiningDate();

		String actualJoiningDate = leaveApplicationCacheModel.actualJoiningDate;

		if ((actualJoiningDate != null) && (actualJoiningDate.length() == 0)) {
			leaveApplicationCacheModel.actualJoiningDate = null;
		}

		leaveApplicationCacheModel.remark = getRemark();

		String remark = leaveApplicationCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			leaveApplicationCacheModel.remark = null;
		}

		leaveApplicationCacheModel.documentId = getDocumentId();

		leaveApplicationCacheModel.status = getStatus();

		String status = leaveApplicationCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			leaveApplicationCacheModel.status = null;
		}

		leaveApplicationCacheModel.reportingManager = getReportingManager();

		String reportingManager = leaveApplicationCacheModel.reportingManager;

		if ((reportingManager != null) && (reportingManager.length() == 0)) {
			leaveApplicationCacheModel.reportingManager = null;
		}

		leaveApplicationCacheModel.joinInHalfDay = getJoinInHalfDay();

		String joinInHalfDay = leaveApplicationCacheModel.joinInHalfDay;

		if ((joinInHalfDay != null) && (joinInHalfDay.length() == 0)) {
			leaveApplicationCacheModel.joinInHalfDay = null;
		}

		return leaveApplicationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LeaveApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LeaveApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LeaveApplication)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LeaveApplication, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LeaveApplication, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LeaveApplication, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LeaveApplication)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LeaveApplication>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _leaveApplicationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _leaveReasonId;
	private long _employeeId;
	private long _leaveTypeId;
	private String _startDate;
	private String _endDate;
	private boolean _startInHalfDay;
	private boolean _endInHalfDay;
	private String _actualJoiningDate;
	private String _remark;
	private long _documentId;
	private String _status;
	private String _reportingManager;
	private String _joinInHalfDay;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LeaveApplication, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LeaveApplication)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("leaveApplicationId", _leaveApplicationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("leaveReasonId", _leaveReasonId);
		_columnOriginalValues.put("employeeId", _employeeId);
		_columnOriginalValues.put("leaveTypeId", _leaveTypeId);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("startInHalfDay", _startInHalfDay);
		_columnOriginalValues.put("endInHalfDay", _endInHalfDay);
		_columnOriginalValues.put("actualJoiningDate", _actualJoiningDate);
		_columnOriginalValues.put("remark", _remark);
		_columnOriginalValues.put("documentId", _documentId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("reportingManager", _reportingManager);
		_columnOriginalValues.put("joinInHalfDay", _joinInHalfDay);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("leaveApplicationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("leaveReasonId", 256L);

		columnBitmasks.put("employeeId", 512L);

		columnBitmasks.put("leaveTypeId", 1024L);

		columnBitmasks.put("startDate", 2048L);

		columnBitmasks.put("endDate", 4096L);

		columnBitmasks.put("startInHalfDay", 8192L);

		columnBitmasks.put("endInHalfDay", 16384L);

		columnBitmasks.put("actualJoiningDate", 32768L);

		columnBitmasks.put("remark", 65536L);

		columnBitmasks.put("documentId", 131072L);

		columnBitmasks.put("status", 262144L);

		columnBitmasks.put("reportingManager", 524288L);

		columnBitmasks.put("joinInHalfDay", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LeaveApplication _escapedModel;

}